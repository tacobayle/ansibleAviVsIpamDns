---
- hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - "vars/params.yml"

  collections:
    - vmware.alb

  tasks:

#    - name: Get Clouds list
#      vmware.alb.avi_api_session:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        http_method: get
#        path: cloud
#      register: cloudResults
#      ignore_errors: yes
#      when:
#        - state is not defined
#
#    - name: Retrieve IPAM Ref
#      set_fact:
#        ipam_ref: "{{ item.ipam_provider_ref.split('/ipamdnsproviderprofile/')[1] }}"
#      loop: "{{ cloudResults.obj.results }}"
#      loop_control:
#        label: "{{ item.name }}"
#      when:
#        - state is not defined
#        - item.name == avi_cloud.name
#      tags:
#        - ipamdns
#
#    - name: Retrieve DNS Ref
#      set_fact:
#        dns_ref: "{{ item.dns_provider_ref.split('/ipamdnsproviderprofile/')[1] }}"
#      loop: "{{ cloudResults.obj.results }}"
#      loop_control:
#        label: "{{ item.name }}"
#      when:
#        - state is not defined
#        - item.name == avi_cloud.name
#      tags:
#        - ipamdns

#    - name: Debug
#      debug:
#        msg: "{{ ipam_ref }}"
#
#    - name: Debug
#      debug:
#        msg: "{{ dns_ref }}"

#    - name: get IPAM/DNS Profile
#      vmware.alb.avi_api_session:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        http_method: get
#        timeout: 300
#        path: ipamdnsproviderprofile
#      register: ipamDnsOutput
#      tags:
#        - ipamdns
#      when:
#        - state is not defined
#
#    - name: Retrieve domain_name
#      set_fact:
#        domain_name: "{{ item.internal_profile.dns_service_domain.0.domain_name }}"
#      loop: "{{ ipamDnsOutput.obj.results }}"
#      loop_control:
#        label: "{{ item.name }}"
#      when:
#        - state is not defined
#        - item.uuid == dns_ref
#        - item.type == "IPAMDNS_TYPE_INTERNAL_DNS"
#      tags:
#        - ipamdns
#
#    - name: Debug
#      debug:
#        msg: "{{ domain_name }}"

#    - name: Retrieve IPAM Network details
#      set_fact:
#        network_uuid: "{{ item.internal_profile.usable_networks.0.nw_ref.split('/network/')[1] }}"
#      loop: "{{ ipamDnsOutput.obj.results }}"
#      loop_control:
#        label: "{{ item.name }}"
#      when:
#        - state is not defined
#        - item.type == "IPAMDNS_TYPE_INTERNAL"

#    - name: Debug
#      debug:
#        msg: "{{ network_uuid }}"

    - name: get Network details
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: network_list
      tags:
        - ipamdns
      when:
        - state is not defined


    - name: Retrieve Network details
      set_fact:
        network_name: "{{ item.name }}"
        network_mask: "{{ item.configured_subnets.0.prefix.mask }}"
        network_address: "{{ item.configured_subnets.0.prefix.ip_addr.addr }}"
        network_type: "{{ item.configured_subnets.0.prefix.ip_addr.type }}"
      loop: "{{ network_list.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - state is not defined
        - item.name == network_name
      tags:
        - ipamdns

    - name: Debug
      debug:
        msg: "{{ network_name }}"
      when:
        - state is not defined

    - name: Debug
      debug:
        msg: "{{ network_mask }}"
      when:
        - state is not defined

    - name: Debug
      debug:
        msg: "{{ network_address }}"
      when:
        - state is not defined

    - name: Debug
      debug:
        msg: "{{ network_type }}"
      when:
        - state is not defined

    - name: Create HTTP health monitor
      vmware.alb.avi_healthmonitor:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ item.name }}"
        http_monitor:
          http_request: "{{ item.http_request }}"
          http_response_code: "{{ item.http_response_code }}"
        receive_timeout: "{{ item.receive_timeout }}"
        failed_checks: "{{ item.failed_checks }}"
        send_interval: "{{ item.send_interval }}"
        successful_checks: "{{ item.successful_checks }}"
        type: "{{ item.type }}"
      loop: "{{ avi_healthmonitor }}"
      when:
        - state is not defined
        - item.type == "HEALTH_MONITOR_HTTP"
        - avi_healthmonitor is defined
      tags:
        - hm
        - pool
        - vs

    - name: Create pool without server
      vmware.alb.avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ avi_pool.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ avi_pool.health_monitor_refs }}"
      when:
        - state is not defined
        - avi_pool is defined
      tags:
        - pool
        - vs

    - name: update pool with servers
      vmware.alb.avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ avi_pool.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        lb_algorithm: "{{ avi_pool.lb_algorithm }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ avi_pool.health_monitor_refs }}"
        default_server_port: "{{ avi_servers_port }}"
        servers:
          - ip:
              addr: "{{ item }}"
              type: 'V4'
      loop: "{{ avi_servers_ips }}"
      when:
        - state is not defined
        - avi_servers_ips is defined
        - avi_pool is defined
      tags:
        - pool
        - vs

    - name: Create vsvip
      vmware.alb.avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.name + '.' + domain_name) }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref | default(network_name) }}"
              subnet:
                mask: "{{ item.mask | default(network_mask) }}"
                ip_addr:
                  type: "{{ item.type | default(network_type) }}"
                  addr: "{{ item.addr | default(network_address) }}"
      register: OutputVsVip
      loop: "{{ avi_virtualservice.http }}"
      when:
        - state is not defined
        - avi_virtualservice.http is defined
      tags:
        - vsvip
        - vs

    - name: Create or Delete HTTP Virtualservice (based on Dynamic IP - Ipam and DNS)
      vmware.alb.avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ avi_cloud.name | default('Default-Cloud') }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        ssl_profile_ref: "/api/sslprofile/?name={{ item.ssl_profile_ref | default('System-Standard') }}"
        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
        services: "{{ item.services }}"
        pool_ref: "/api/pool?name={{ item.pool_ref }}"
        enable_rhi: "{{ item.enable_rhi | default('false') }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        state: "{{ state | default(omit) }}"
        analytics_policy:
          udf_log_throttle: 10
          full_client_logs:
            duration: 30
            throttle: 10
            enabled: true
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 0
          client_insights: NO_INSIGHTS
          full_client_logs:
            duration: 30
            throttle: 10
            enabled: true
          all_headers: true
      loop: "{{ avi_virtualservice.http }}"
      when:
        - avi_virtualservice.http is defined
      tags:
        - vs
